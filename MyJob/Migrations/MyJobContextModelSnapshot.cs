// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyJob.Database;

#nullable disable

namespace MyJob.Migrations
{
    [DbContext(typeof(MyJobContext))]
    partial class MyJobContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("UserSequence");

            modelBuilder.Entity("MyJob.Models.FileData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("MyJob.Models.Opportunity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicantsCVIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("OpportunitySeekerId")
                        .HasColumnType("int");

                    b.Property<string>("OrganizationFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("OpportunitySeekerId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Opportunities");
                });

            modelBuilder.Entity("MyJob.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [UserSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PictureId")
                        .HasColumnType("int");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PictureId");

                    b.ToTable("Users");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("MyJob.Models.OpportunitySeeker", b =>
                {
                    b.HasBaseType("MyJob.Models.User");

                    b.Property<int?>("CVId")
                        .HasColumnType("int");

                    b.HasIndex("CVId");

                    b.ToTable("OpportunitySeekers");
                });

            modelBuilder.Entity("MyJob.Models.Organization", b =>
                {
                    b.HasBaseType("MyJob.Models.User");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("MyJob.Models.Opportunity", b =>
                {
                    b.HasOne("MyJob.Models.OpportunitySeeker", null)
                        .WithMany("Experiences")
                        .HasForeignKey("OpportunitySeekerId");

                    b.HasOne("MyJob.Models.Organization", null)
                        .WithMany("Opportunities")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("MyJob.Models.User", b =>
                {
                    b.HasOne("MyJob.Models.FileData", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("MyJob.Models.OpportunitySeeker", b =>
                {
                    b.HasOne("MyJob.Models.FileData", "CV")
                        .WithMany()
                        .HasForeignKey("CVId");

                    b.Navigation("CV");
                });

            modelBuilder.Entity("MyJob.Models.OpportunitySeeker", b =>
                {
                    b.Navigation("Experiences");
                });

            modelBuilder.Entity("MyJob.Models.Organization", b =>
                {
                    b.Navigation("Opportunities");
                });
#pragma warning restore 612, 618
        }
    }
}
